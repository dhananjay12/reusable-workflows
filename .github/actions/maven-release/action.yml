name: "Maven releases"
description: "Maven RC, Minor and Patch releases"
inputs:
  pom-path:
    description: 'POM file location'
    required: false
    default: 'pom.xml'
  release-minor:
    description: 'Release minor version'
    required: false
    default: 'false'
  release-patch:
    description: 'Release patch version'
    required: false
    default: 'false'
  java-version:
    description: "Java version to Initialize repo"
    required: false
    default: "17"
  distribution:
    description: "Whether to cache dependencies or not."
    required: false
    default: "adopt"
runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [ -z "${{ inputs.release-minor }}" ] || [ -z "${{ inputs.release-patch }}" ]; then
          echo "Cannot release both minor and patch"
          exit 1
        fi
    - name: Initialize Java and Maven
      uses: dhananjay12/reusable-workflows/.github/actions/init-maven@main
      with:
        java-version: ${{ inputs.java-version }}
        distribution: ${{ inputs.distribution }}
    - name: Current POM version
      id: pom-version
      shell: bash
      run: |
        current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --file ${{ inputs.pom }})
        current_version=${current_version%-*}
        VERSION_PARTS=(${current_version//-rc./ })
        sem_ver=${VERSION_PARTS[0]}
        echo "current_sem_ver=${sem_ver}" >> $GITHUB_OUTPUT
        rc_ver=${VERSION_PARTS[1]}
        SEM_VER_PARTS=(${sem_ver//./ })
        echo "major=${SEM_VER_PARTS[0]}" >> $GITHUB_OUTPUT
        echo "minor=${SEM_VER_PARTS[1]}" >> $GITHUB_OUTPUT
        echo "patch=${SEM_VER_PARTS[2]}" >> $GITHUB_OUTPUT
        echo "rc_ver=${rc_ver}" >> $GITHUB_OUTPUT
    - name: Release RC version
      if: (!inputs.release-minor && !inputs.release-patch)
      env:
        RC_VER: ${{steps.pom-version.outputs.rc_ver}}
        CURRENT_SEM_VER: ${{steps.pom-version.outputs.current_sem_ver}}
      shell: bash
      run: |
        if [ -z ${RC_VER} ]
          mvn -Darguments=-Dmaven.test.skip release:prepare release:perform  \
          -DreleaseVersion=${CURRENT_SEM_VER}-rc.$(RC_VER) \
          -DdevelopmentVersion=${CURRENT_SEM_VER}-rc.$((RC_VER+1))-SNAPSHOT
        fi
    - name: Release Minor version
      if: inputs.release-minor
      shell: bash
      env:
        CURRENT_SEM_VER: ${{steps.pom-version.outputs.current_sem_ver}}
        MAJOR: ${{steps.pom-version.outputs.major}}
        MINOR: ${{steps.pom-version.outputs.minor}}
      run: |
          mvn -Darguments=-Dmaven.test.skip release:prepare release:perform  \
          -DreleaseVersion=${CURRENT_SEM_VER} \
          -DdevelopmentVersion=${MAJOR}.$((MINOR+1)).0-rc.0-SNAPSHOT
    - name: Release Patch version
      if: inputs.release-patch
      shell: bash
      env:
        CURRENT_SEM_VER: ${{steps.pom-version.outputs.current_sem_ver}}
        MAJOR: ${{steps.pom-version.outputs.major}}
        MINOR: ${{steps.pom-version.outputs.minor}}
        PATCH: ${{steps.pom-version.outputs.patch}}
      run: |
          mvn -Darguments=-Dmaven.test.skip release:prepare release:perform  \
          -DreleaseVersion=${MAJOR}.${MINOR}.$((PATCH+1)) \
          -DdevelopmentVersion=${MAJOR}.${MINOR}.$((PATCH+1))-SNAPSHOT